{"ast":null,"code":"import _defineProperty from \"/Users/dsklff/Desktop/azimut-lab/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/dsklff/Desktop/azimut-lab/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import React from 'react';\n// import './index.css';\n// import PropTypes from 'prop-types';\n// import paginate from 'paginate-array';\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       todos: [],\n//       isLoaded: false,\n//       size: 5,\n//       page: 1,\n//       currPage: newCurrPage\n//     }\n//     this.previousPage = this.previousPage.bind(this);\n//     this.nextPage = this.nextPage.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   componentDidMount() {\n//     fetch(`https://jsonplaceholder.typicode.com/todos`)\n//       .then(response => response.json())\n//       .then(todos => {\n//         const { page, size } = this.state;\n//         const currPage = paginate(todos, page, size);\n//         this.setState({\n//           ...this.state,\n//           todos,\n//           currPage\n//         });\n//       });\n//   }\n//   previousPage() {\n//     const { currPage, page, size, todos } = this.state;\n//     if (page > 1) {\n//       const newPage = page - 1;\n//       const newCurrPage = paginate(todos, newPage, size);\n//       this.setState({\n//         ...this.state,\n//         page: newPage,\n//         currPage: newCurrPage\n//       });\n//     }\n//   }\n//   nextPage() {\n//     const { currPage, page, size, todos } = this.state;\n//     if (page < currPage.totalPages) {\n//       const newPage = page + 1;\n//       const newCurrPage = paginate(todos, newPage, size);\n//       this.setState({ ...this.state, page: newPage, currPage: newCurrPage });\n//     }\n//   }\n//   handleChange(e) {\n//     const { value } = e.target;\n//     const { todos, page } = this.state;\n//     const newSize = +value;\n//     const newPage = 1;\n//     const newCurrPage = paginate(todos, newPage, newSize);\n//     this.setState({\n//       ...this.state,\n//       size: newSize,\n//       page: newPage,\n//       currPage: newCurrPage\n//     });\n//   }\n//   render() {\n//     var { todos, isLoaded, page, size, currPage } = this.state;\n//     if(!isLoaded) {\n//         return <div>Loading...</div>\n//     } else {\n//         return (\n//         <div>\n//           <div>\n//               {todos.map(todo => (\n//                 <div key={todo.id} style={{width: \"400px\", height: \"100px\", border: \"0.1px solid #000\", textAlign: \"center\", verticalAlign: \"middle\", lineHeight: \"100px\", backgroundColor: \"#FFFF\", borderRadius: \"10px\", marginBottom: \"20px\", boxShadow: \"0px 4px 1px rgba(0, 0, 0, 0.25)\", fontFamily: \"Montserrat\", fontStyle: \"normal\", fontWeight: \"bold\", fontSize: \"20px\", position: \"relative\", left: \"0%\", right: \"0%\", top: \"0%\", bottom: \"0%\"}}>\n//                     <span className=\"dot\" style={{height: \"60px\", width: \"60px\", backgroundColor: todo.completed ? \"#008F7A\" : \"#EBEBEB\", borderRadius: \"50%\", display: \"inline-block\", verticalAlign: \"middle\", lineHeight: \"100px\", left: \"6%\", right: \"79%\", top: \"20%\", bottom: \"20%\", position: \"absolute\"}}></span>\n//                     <div style = {{width: \"250px\",  overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", lineHeight: \"100px\", position: \"absolute\", left: \"25%\", right: \"0%\", top: \"0%\", bottom: \"38%\"}}>{todo.title}</div> {/* | Completed: {todo.completed === true ? <div>True</div> : <div>False</div>} */}\n//                 </div>\n//               ))}\n//           </div>\n//           <div>Page: {page}</div>\n//           <div>Size: {size}</div>\n//           <div>\n//           <label for=\"size\">Size</label>\n//           <select name=\"size\" id=\"size\" onChange={this.handleChange}>\n//             <option value=\"5\">5</option>\n//             <option value=\"10\">10</option>\n//             <option value=\"25\">25</option>\n//           </select>\n//         </div>\n//         </div>\n//         )\n//     }\n//   }\n// }\n// export default App;\nimport React, { Component } from 'react';\nimport paginate from 'paginate-array';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n      size: 5,\n      page: 1,\n      currPage: null\n    };\n    this.previousPage = this.previousPage.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/todos\").then(response => response.json()).then(todos => {\n      const _this$state = this.state,\n            page = _this$state.page,\n            size = _this$state.size;\n      const currPage = paginate(todos, page, size);\n      this.setState(_objectSpread({}, this.state, {\n        todos,\n        currPage\n      }));\n    });\n  }\n\n  previousPage() {\n    const _this$state2 = this.state,\n          currPage = _this$state2.currPage,\n          page = _this$state2.page,\n          size = _this$state2.size,\n          todos = _this$state2.todos;\n\n    if (page > 1) {\n      const newPage = page - 1;\n      const newCurrPage = paginate(todos, newPage, size);\n      this.setState(_objectSpread({}, this.state, {\n        page: newPage,\n        currPage: newCurrPage\n      }));\n    }\n  }\n\n  nextPage() {\n    const _this$state3 = this.state,\n          currPage = _this$state3.currPage,\n          page = _this$state3.page,\n          size = _this$state3.size,\n          todos = _this$state3.todos;\n\n    if (page < currPage.totalPages) {\n      const newPage = page + 1;\n      const newCurrPage = paginate(todos, newPage, size);\n      this.setState(_objectSpread({}, this.state, {\n        page: newPage,\n        currPage: newCurrPage\n      }));\n    }\n  }\n\n  handleChange(e) {\n    const value = e.target.value;\n    const _this$state4 = this.state,\n          todos = _this$state4.todos,\n          page = _this$state4.page;\n    const newSize = +value;\n    const newPage = 1;\n    const newCurrPage = paginate(todos, newPage, newSize);\n    this.setState(_objectSpread({}, this.state, {\n      size: newSize,\n      page: newPage,\n      currPage: newCurrPage\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"page: \", page), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"size: \", size), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      for: \"size\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Size\"), React.createElement(\"select\", {\n      name: \"size\",\n      id: \"size\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"option\", {\n      value: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"10\"), React.createElement(\"option\", {\n      value: \"25\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"25\"))), currPage && React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, currPage.data.map(todo => React.createElement(\"li\", {\n      key: todo.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, todo.title))), React.createElement(\"button\", {\n      onClick: this.previousPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Previous Page\"), React.createElement(\"button\", {\n      onClick: this.nextPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Next Page\"));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/dsklff/Desktop/azimut-lab/src/App.js"],"names":["React","Component","paginate","App","constructor","props","state","todos","size","page","currPage","previousPage","bind","nextPage","handleChange","componentDidMount","fetch","then","response","json","setState","newPage","newCurrPage","totalPages","e","value","target","newSize","render","data","map","todo","id","title","TodoList"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import './index.css';\n// import PropTypes from 'prop-types';\n// import paginate from 'paginate-array';\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     this.state = {\n//       todos: [],\n//       isLoaded: false,\n//       size: 5,\n//       page: 1,\n//       currPage: newCurrPage\n//     }\n\n//     this.previousPage = this.previousPage.bind(this);\n//     this.nextPage = this.nextPage.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n\n//   }\n\n//   componentDidMount() {\n//     fetch(`https://jsonplaceholder.typicode.com/todos`)\n//       .then(response => response.json())\n//       .then(todos => {\n//         const { page, size } = this.state;\n\n//         const currPage = paginate(todos, page, size);\n\n//         this.setState({\n//           ...this.state,\n//           todos,\n//           currPage\n//         });\n//       });\n//   }\n\n//   previousPage() {\n//     const { currPage, page, size, todos } = this.state;\n\n//     if (page > 1) {\n//       const newPage = page - 1;\n//       const newCurrPage = paginate(todos, newPage, size);\n\n//       this.setState({\n//         ...this.state,\n//         page: newPage,\n//         currPage: newCurrPage\n//       });\n//     }\n//   }\n\n//   nextPage() {\n//     const { currPage, page, size, todos } = this.state;\n\n//     if (page < currPage.totalPages) {\n//       const newPage = page + 1;\n//       const newCurrPage = paginate(todos, newPage, size);\n//       this.setState({ ...this.state, page: newPage, currPage: newCurrPage });\n//     }\n//   }\n\n//   handleChange(e) {\n//     const { value } = e.target;\n//     const { todos, page } = this.state;\n\n//     const newSize = +value;\n//     const newPage = 1;\n//     const newCurrPage = paginate(todos, newPage, newSize);\n\n//     this.setState({\n//       ...this.state,\n//       size: newSize,\n//       page: newPage,\n//       currPage: newCurrPage\n//     });\n//   }\n\n//   render() {\n\n//     var { todos, isLoaded, page, size, currPage } = this.state;\n\n//     if(!isLoaded) {\n//         return <div>Loading...</div>\n//     } else {\n//         return (\n//         <div>\n//           <div>\n//               {todos.map(todo => (\n//                 <div key={todo.id} style={{width: \"400px\", height: \"100px\", border: \"0.1px solid #000\", textAlign: \"center\", verticalAlign: \"middle\", lineHeight: \"100px\", backgroundColor: \"#FFFF\", borderRadius: \"10px\", marginBottom: \"20px\", boxShadow: \"0px 4px 1px rgba(0, 0, 0, 0.25)\", fontFamily: \"Montserrat\", fontStyle: \"normal\", fontWeight: \"bold\", fontSize: \"20px\", position: \"relative\", left: \"0%\", right: \"0%\", top: \"0%\", bottom: \"0%\"}}>\n//                     <span className=\"dot\" style={{height: \"60px\", width: \"60px\", backgroundColor: todo.completed ? \"#008F7A\" : \"#EBEBEB\", borderRadius: \"50%\", display: \"inline-block\", verticalAlign: \"middle\", lineHeight: \"100px\", left: \"6%\", right: \"79%\", top: \"20%\", bottom: \"20%\", position: \"absolute\"}}></span>\n//                     <div style = {{width: \"250px\",  overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", lineHeight: \"100px\", position: \"absolute\", left: \"25%\", right: \"0%\", top: \"0%\", bottom: \"38%\"}}>{todo.title}</div> {/* | Completed: {todo.completed === true ? <div>True</div> : <div>False</div>} */}\n//                 </div>\n//               ))}\n//           </div>\n//           <div>Page: {page}</div>\n//           <div>Size: {size}</div>\n//           <div>\n//           <label for=\"size\">Size</label>\n//           <select name=\"size\" id=\"size\" onChange={this.handleChange}>\n//             <option value=\"5\">5</option>\n//             <option value=\"10\">10</option>\n//             <option value=\"25\">25</option>\n//           </select>\n//         </div>\n//         </div>\n//         )\n//     }\n//   }\n// }\n\n// export default App;\n\nimport React, { Component } from 'react';\nimport paginate from 'paginate-array';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      size: 5,\n      page: 1,\n      currPage: null\n    }\n\n    this.previousPage = this.previousPage.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/todos`)\n      .then(response => response.json())\n      .then(todos => {\n        const { page, size } = this.state;\n\n        const currPage = paginate(todos, page, size);\n\n        this.setState({\n          ...this.state,\n          todos,\n          currPage\n        });\n      });\n  }\n\n  previousPage() {\n    const { currPage, page, size, todos } = this.state;\n\n    if (page > 1) {\n      const newPage = page - 1;\n      const newCurrPage = paginate(todos, newPage, size);\n\n      this.setState({\n        ...this.state,\n        page: newPage,\n        currPage: newCurrPage\n      });\n    }\n  }\n\n  nextPage() {\n    const { currPage, page, size, todos } = this.state;\n\n    if (page < currPage.totalPages) {\n      const newPage = page + 1;\n      const newCurrPage = paginate(todos, newPage, size);\n      this.setState({ ...this.state, page: newPage, currPage: newCurrPage });\n    }\n  }\n\n  handleChange(e) {\n    const { value } = e.target;\n    const { todos, page } = this.state;\n\n    const newSize = +value;\n    const newPage = 1;\n    const newCurrPage = paginate(todos, newPage, newSize);\n\n    this.setState({\n      ...this.state,\n      size: newSize,\n      page: newPage,\n      currPage: newCurrPage\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>page: {page}</div>\n        <div>size: {size}</div>\n        <div>\n          <label for=\"size\">Size</label>\n          <select name=\"size\" id=\"size\" onChange={this.handleChange}>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"25\">25</option>\n          </select>\n        </div>\n        {currPage &&\n          <ul>\n            {currPage.data.map(todo => <li key={todo.id}>{todo.title}</li>)}\n          </ul>\n        }\n        <button onClick={this.previousPage}>Previous Page</button>\n        <button onClick={this.nextPage}>Next Page</button>\n      </div>\n    )\n  }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}